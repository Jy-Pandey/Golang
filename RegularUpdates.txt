Day : 1
Basic introduction to Go (Golang) and its features
Installation of Go and setting up the environment
Overview of the fmt package and its usage
Understanding variables, data types, and loops in Go

Day : 2
Updates : Jyoti pandey
1. I learned how to take user input using fmt.Scanln, bufio.NewReader, and os.Stdin.
2. understood type conversions in Go, including type casting and using strconv for strings, integers, and floats.
3. understood time handling using time.Now(), Format(), Parse() and time.Sleep().
4. learned the difference between new and make for memory allocation in Go.
5. understood arrays, pointers and its referencing concept
5. understood working of slice, their relationship with arrays, length, capacity, append and deletion in slice.

Day - 3
Updates: Jyoti Pandey
1. Learned how to use maps and structs to store and group data.
2. Practiced if-else and switch conditions.
3. Understood functions — including variadic functions, anonymous functions, named returns, and basic function usage.
4. Understood what methods are and how they work with structs.
5. Learned how defer is used to run code at the end, like closing a file.
6. Practiced file handling – how to create, read, write, update, add data, and delete files.
7. Started learning about web requests using the net/http package.

Day - 4
Updates: Jyoti Pandey
1. Learned how to extract info from URLs (scheme, host, query params)
2. Made GET and POST HTTP requests in Go
3. Sent form data using url.Values{}
4. Sent JSON data using json.Marshal
5. Learned how to encode, decode JSON data
6. Started using PostgreSQL for REST APIs in Go

go get github.com/gin-gonic/gin
go get gorm.io/gorm
go get gorm.io/driver/postgres
go get go.uber.org/fx
go get go.uber.org/fx@latest
go get golang.org/x/crypto/sha3@latest
go mod tidy // Go fetch all required dependencies 

Fx : Automatic dependebcy injector

Day - 5
1. Learned how to build REST API using Gin framework (CRUD operations with PostgreSQL).
2. Understood Fx framework for Dependency Injection with a working example.
3. Understood Interfaces in Go – how they work.
4. Started learning OpenAPI Specification – how to document APIs using Swagger UI.

For integrating swagger UI
download -  https://github.com/swagger-api/swagger-ui/archive/refs/heads/master.zip
Extract the ZIP file → open the folder swagger-ui-master/dist
Copy the entire dist folder to your project inside static folder and rename it with swagger-ui
in index file - replace this url: "https://petstore.swagger.io/v2/swagger.json", 
with url: "/openapi.yaml",
Now it tells Swagger UI:
“Load the OpenAPI documentation from our own file at http://localhost:8080/openapi.yaml”

Day - 6
1. Learned how to write OpenAPI specification in YAML format to describe REST APIs properly.
2. Learned how to use Swagger UI to show and test API routes in the browser.
3. Created a Bookstore project with CRUD operations using Gin, PostgreSQL, and used Dependency Injection to organize the code better.

Day-7
1. Learned what goroutines are and how they help in concurrency and parallelism in Go.
2. Used sync package tools like WaitGroup, Mutex, and channels to manage multiple goroutines safely.
3. Learned about race conditions and how to stop them using Mutex.
4. Revised how JOIN works in PostgreSQL.
5. Started learning about project folder structure and its parts like configure, models, handlers, services, repository, and routes.

Day-8 BookApi - Third party Api 
1. Built a Book API using Go, Gin, and PostgreSQL with clean folder structure.
2. Used Fx to manage dependencies like database and routes easily.
3. Added trending books from an external API into our database.
4. Set up a cron job to clear all books from the table every hour.
5. Used Postman for testing and connected OpenAPI YAML to Swagger UI for documentation.


temporal
mug flows



